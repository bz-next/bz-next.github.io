<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    
    <title>BZ-Next: Modernizing BZFlag</title>
    
    
    <description>BZ-Next: Modernizing BZFlag</description>
    
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>Windows Map Editor Build Available</title>
        <description>
          Windows Map Editor / Viewer - 
          A windows build of the map editor is now available. It is in sync with the current prototype at https://bz-next.github.io/mapviewer3/mapviewer.html

Map Editor Release on GitHub

        </description>
        <pubDate>Sun, 18 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-18-mapeditor-release/</link>
        <guid isPermaLink="true">/2024-02-18-mapeditor-release/</guid>
      </item>
    
      <item>
        <title>WebGL2 Map Editor Prototype Online</title>
        <description>
          WebGL2 Map Editor / Viewer - 
          A fairly full-featured map viewer/editor is now online at https://bz-next.github.io/mapviewer3/mapviewer.html The online editor/viewer can fetch textures from images.bzflag.org using the Emscripten fetch API and CORS. You can open the editor (found under the view menu), and tweak the currently loaded BZW file. Then, click “Update 3D View” and see your...
        </description>
        <pubDate>Fri, 16 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-16-mapviewer-editor/</link>
        <guid isPermaLink="true">/2024-02-16-mapviewer-editor/</guid>
      </item>
    
      <item>
        <title>WebGL Mapviewer Demo Online</title>
        <description>
          Supporting WebGL in BZ-Next - 
          A WebGL map viewer demo app is online at https://bz-next.github.io/mapviewer/mapviewer.html Currently the online demo can’t access any textures that aren’t bundled with the game, so try it on maps that don’t use custom textures. Meshes and so on should work fine, however. If you load a map that uses non-standard...
        </description>
        <pubDate>Fri, 09 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-09-mapviewer-prototype/</link>
        <guid isPermaLink="true">/2024-02-09-mapviewer-prototype/</guid>
      </item>
    
      <item>
        <title>Emscripten WebGL Support</title>
        <description>
          Supporting WebGL in BZ-Next - 
          A new WebGL-enabled target for an online map viewer has been added, along with support for Emscripten in the build system. The client doesn’t render a map yet, but all the mesh/shading code is there to do so. Next is to adapt the .bzw world loader from bzfs to load...
        </description>
        <pubDate>Thu, 08 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-08-webgl/</link>
        <guid isPermaLink="true">/2024-02-08-webgl/</guid>
      </item>
    
      <item>
        <title>BZ-Next Running on Librem 5 phone</title>
        <description>
          Supporting embedded OpenGL - 
          blast007 was able to build and run the BZ-Next client on a Librem 5, a linux phone with GLES2 support. Missile Wars 2.3 rendered at around 30fps on the development client. ImGUI debug UI rendered on the Librem 5. The framerate is about the same as the regular BZFlag client...
        </description>
        <pubDate>Mon, 05 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-05-Librem5/</link>
        <guid isPermaLink="true">/2024-02-05-Librem5/</guid>
      </item>
    
      <item>
        <title>GLES2 support added to development branch</title>
        <description>
          Supporting embedded OpenGL - 
          GLES2 is now supported in the main development branch. This should help with support for embedded devices (phones, raspberry pi, etc).

When building, specify -DMAGNUM_TARGET_GLES=ON -DMAGNUM_TARGET_GLES2=ON at cmake time, for example:

$ cmake -DMAGNUM_TARGET_GLES=ON -DMAGNUM_TARGET_GLES2=ON -DCMAKE_BUILD_TYPE=Release -DENABLE_CLIENT=TRUE -DENABLE_SERVER=FALSE -DENABLE_PLUGINS=FALSE ..
$ make -j$(nproc)


        </description>
        <pubDate>Mon, 05 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-05-GLES2/</link>
        <guid isPermaLink="true">/2024-02-05-GLES2/</guid>
      </item>
    
      <item>
        <title>MinGW support added to development branch</title>
        <description>
          Cross-compiling works - 
          MinGW64 cross compiling is now supported in the main development branch.

Check building page for info on how to compile for Windows.

        </description>
        <pubDate>Sat, 03 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-03-mingw-in-dev/</link>
        <guid isPermaLink="true">/2024-02-03-mingw-in-dev/</guid>
      </item>
    
      <item>
        <title>Mesh generation cleaned up</title>
        <description>
          Memory and CPU reduction - 
          The world mesh generation code was cleaned up a bit, yielding significant memory savings, and a speedup as well.

In certain cases (involving drawinfo meshes), the old code would copy much more data per mesh than was necessary.

        </description>
        <pubDate>Sat, 03 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-03-meshgen-memory/</link>
        <guid isPermaLink="true">/2024-02-03-meshgen-memory/</guid>
      </item>
    
      <item>
        <title>BZ-Next Site Created</title>
        <description>
          Towards the future! - 
          Welcome to the site for BZ-Next. This will mostly be a place for development notes, build instructions, dev releases, and updates.

        </description>
        <pubDate>Thu, 01 Feb 2024 00:00:00 -0500</pubDate>
        <link>/2024-02-01-first/</link>
        <guid isPermaLink="true">/2024-02-01-first/</guid>
      </item>
    
  </channel>
</rss>
